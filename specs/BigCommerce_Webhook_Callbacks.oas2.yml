swagger: '2.0'
info:
  title: Webhook Callbacks
  version: '1.0'
  description: >-
    For a list of all webhook events see [Webhook
    Events](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events). 
paths:
  /store/cart/lineItem/created:
    post:
      responses:
        '200':
          $ref: '#/responses/cartLineItem_Resp'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). 


        The store/cart/lineItem/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/lineItem/created
      produces: []
      consumes:
        - application/json
  /store/cart/lineItem/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/cartLineItem_Resp'
      description: >-
        This webhook is fired whenever a cart is modified through the changes in
        its line items. Eg. when a new item is added to a cart or an existing
        item’s quantity is updated. This hook also fires when the email is
        changed during guest checkout or an existing item is deleted. The
        payload will include the ID of the cart being updated.


        This webhook is also fired along with cart created, because the first
        product being added to an empty cart triggers an update.


        - Logging into store account after creating a cart (email is inherited
        from store account email).

        - Entering email address via guest checkout.

        - Changing the email in guest checkout.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/lineItem/updated
      produces: []
      consumes:
        - application/json
  /store/cart/lineItem/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/cartLineItem_Resp'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. 


        The store/cart/lineItem/updated webhook will also fire when the last
        item is removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/lineItem/deleted
      produces: []
      consumes:
        - application/json
  /store/information/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/storeInfo_Resp'
      description: >-
        This webhook is fired whenever a cart is modified through the changes in
        its line items. Eg. when a new item is added to a cart or an existing
        item’s quantity is updated. This hook also fires when the email is
        changed during guest checkout or an existing item is deleted. The
        payload will include the ID of the cart being updated.


        This webhook is also fired along with cart created, because the first
        product being added to an empty cart triggers an update.


        - Logging into store account after creating a cart (email is inherited
        from store account email).

        - Entering email address via guest checkout.

        - Changing the email in guest checkout.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/information/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/information/updated
      produces: []
      consumes:
        - application/json
  /store/customer/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-created'
          examples:
            application/json:
              created_at: 1592519679
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/created
              hash: 2e71952400de4de7a2fea8806fda1fe62efd1f2c
              data:
                type: customer
                id: 49
      description: >-
        This webhook will fire when a new customer record is created, either in
        the Control Panel, via API or via a storefront.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Customer
      summary: /store/customer/created
      produces: []
      consumes:
        - application/json
  /store/customer/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-created'
          examples:
            application/json:
              created_at: 1592519749
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/updated
              hash: caf2c8f604b632aae3915329d34f8019e12bf3cb
              data:
                type: customer
                id: 49
      description: >-
        This webhook fires when a customer record is updated either via the
        Control Panel, via API or a via storefront
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Customer
      summary: /store/customer/updated
      produces: []
      consumes:
        - application/json
  /store/customer/deleted:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-created'
          examples:
            application/json:
              created_at: 1592520441
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/deleted
              hash: 9b76c76625486961cd63d8b590ced46191f3dbd6
              data:
                type: customer
                id: 49
      description: >-
        This webhook will fire whenever a customer record is deleted either via
        the Control Panel or API. Customers cannot delete accounts via the
        storefront.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Customer
      summary: /store/customer/deleted
      produces: []
      consumes:
        - application/json
  /store/sku/created:
    post:
      responses:
        '200':
          $ref: '#/responses/sku_Resp'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). 


        The store/sku/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - SKU
      summary: /store/sku/created
      produces: []
      consumes:
        - application/json
  /store/sku/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/sku_Resp'
      description: >-
        This webhook is fired whenever a cart is modified through the changes in
        its line items. Eg. when a new item is added to a cart or an existing
        item’s quantity is updated. This hook also fires when the email is
        changed during guest checkout or an existing item is deleted. The
        payload will include the ID of the cart being updated.


        This webhook is also fired along with cart created, because the first
        product being added to an empty cart triggers an update.


        - Logging into customer account after creating a cart (email is
        inherited from customer account email).

        - Entering email address via guest checkout.

        - Changing the email in guest checkout.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - SKU
      summary: /store/sku/updated
      produces: []
      consumes:
        - application/json
  /store/sku/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/sku_Resp'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. 

        The store/sku/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - SKU
      summary: /store/sku/deleted
      produces: []
      consumes:
        - application/json
  /store/category/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/categoryBase'
      description: >-
        This webhook will fire whenever a new category is created in the Control
        Panel or via API.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/created
      produces: []
      consumes:
        - application/json
  /store/category/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/categoryBase'
      description: >-
        This webhook will fire when a category record is modified either via the
        Control Panel or via API.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/updated
      produces: []
      consumes:
        - application/json
  /store/category/deleted:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/categoryBase'
      description: >-
        This webhook will fire whenever a category is deleted via either the
        Control Panel or API.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/deleted
      produces: []
      consumes:
        - application/json
  /store/order/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-created'
          examples:
            application/json:
              created_at: 1592517272
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/order/created
              hash: 85d9fe055191c27a6701e4a62e4d99d50e1e9d12
              data:
                type: order
                id: 349
      description: >-
        This webhook will fire whenever a new order is created either via a
        storefront shopper, or via an API consumer. 
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/order/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Order
      summary: /store/order/created
      produces: []
      consumes:
        - application/json
  /store/order/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: This webhook will fire whenever an order is deleted.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/order/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Order
      summary: /store/order/deleted
      produces: []
      consumes:
        - application/json
  /store/cart/created:
    post:
      responses:
        '200':
          $ref: '#/responses/cart_Resp'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). 


        The store/cart/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/created
      produces: []
      consumes:
        - application/json
  /store/cart/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/cart_Resp'
      description: >-
        This webhook is fired whenever a cart is modified through the changes in
        its line items. Eg. when a new item is added to a cart or an existing
        item’s quantity is updated. This hook also fires when the email is
        changed during guest checkout or an existing item is deleted. The
        payload will include the ID of the cart being updated.


        This webhook is also fired along with cart created, because the first
        product being added to an empty cart triggers an update.


        - Logging into customer account after creating a cart (email is
        inherited from customer account email).

        - Entering email address via guest checkout.

        - Changing the email in guest checkout.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/updated
      produces: []
      consumes:
        - application/json
  /store/cart/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/cart_Resp'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/cart/updated webhook will also fire when the last item is removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/deleted
      produces: []
      consumes:
        - application/json
  /store/product/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/product-base'
          examples:
            application/json:
              created_at: 1592432867
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/product/created
              hash: 0a90e1aaa335eb8e413051965468a2fcc23b3b11
              data:
                type: product
                id: 5102
      description: ''
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Product
      summary: /store/product/created
      produces: []
      consumes:
        - application/json
  /store/product/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/product-base'
          examples:
            application/json:
              created_at: 1592432914
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/product/updated
              hash: 7a75e33d043136f36cc83e5c040e1841c80eb9d1
              data:
                type: product
                id: 5102
      description: ''
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Product
      summary: /store/product/updated
      produces: []
      consumes:
        - application/json
  /store/product/deleted:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/product-base'
          examples:
            application/json:
              created_at: 1592433286
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/product/deleted
              hash: 0623e95b77bbd5e3874559c871eb1961d0cbdd05
              data:
                type: product
                id: 5102
      description: ''
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Product
      summary: /store/product/deleted
      produces: []
      consumes:
        - application/json
  /store/cart/couponApplied:
    post:
      responses:
        '200':
          $ref: '#/responses/cartCouponApplied_Resp'
      description: >-
        This webhook will fire whenever a new coupon code is applied to a cart.
        It will include the ID of the coupon code.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/couponApplied
      produces: []
      consumes:
        - application/json
  /store/cart/abandoned:
    post:
      responses:
        '200':
          $ref: '#/responses/cartAbandoned_Resp'
      description: >-
        This webhook will fire once after a cart is abandoned. A cart is
        considered abandoned if no changes were made at least one hour after the
        last modified property.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/abandoned
      produces: []
      consumes:
        - application/json
  /store/cart/converted:
    post:
      responses:
        '200':
          $ref: '#/responses/cartConverted_Resp'
      description: >-
        This hook fires when a cart is converted into an order, which is
        typically after the payment step of checkout on the storefront. At this
        point, the Cart is no longer accessible and has been deleted. 

        This hook returns both the Cart ID and Order ID for correlation
        purposes.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/converted
      produces: []
      consumes:
        - application/json
  /store/order/statusUpdated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-updated'
          examples:
            application/json:
              created_at: 1592517272
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/order/statusUpdated
              hash: 71ba387dfa754de7e2636d035da133791e618fa6
              data:
                type: order
                id: 349
                status:
                  previous_status_id: 0
                  new_status_id: 11
      tags:
        - Order
      description: >-
        This webhook fires when the status of an order is changed. It also fires
        when an order is created, because the order status is changed from `0`
        to a different status (depending on the payment gateway and payment
        capture settings).
      summary: /store/order/statusUpdated
      consumes:
        - application/json
  "store/order/message/created\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-message-created'
          examples:
            application/json:
              created_at: 1592518324
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/order/message/created
              hash: 4bda8a99936ba9f4486fed0a7de47eb50789fdb0
              data:
                type: order
                id: 348
                message:
                  order_message_id: 5
      summary: "store/order/message/created\t"
      tags:
        - Order
      consumes:
        - application/json
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
  "store/order/archived\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-created'
          examples:
            application/json:
              created_at: 1592518382
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/order/archived
              hash: d6ea0cd835be41dbd95b448b8827a04d2e32a2df
              data:
                type: order
                id: 349
      summary: "store/order/archived\t"
      consumes:
        - application/json
      tags:
        - Order
      description: This webhooks is triggered when an order is archived
  store/customer/address/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-address-created'
          examples:
            application/json:
              created_at: 1592520337
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/address/created
              hash: aa503343bc9462a96a5a10e82bc04c5b3df080f5
              data:
                type: customer
                id: 46739
                address:
                  customer_id: 49
      summary: store/customer/address/created
      tags:
        - Customer
      description: >-
        This webhook fires when a customer address is created via either the
        Control Panel, API or a storefront.
      consumes:
        - application/json
  store/customer/address/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-address-created'
          examples:
            application/json:
              created_at: 1592520354
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/address/updated
              hash: d1a1ff272870092a97c45c39df7c15063d35d171
              data:
                type: customer
                id: 46739
                address:
                  customer_id: 49
      summary: store/customer/address/updated
      tags:
        - Customer
      description: >-
        This webhook fires when a customer address is updated via either the
        Control Panel, API or a storefront.
      consumes:
        - application/json
  /store/customer/address/deleted:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/customer-address-created'
          examples:
            application/json:
              created_at: 1592520358
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/customer/address/deleted
              hash: b24670d9e1276c0cd6b497cbaecedcf8518535ab
              data:
                type: customer
                id: 46739
                address:
                  customer_id: '49'
      summary: /store/customer/address/deleted
      tags:
        - Customer
      description: >-
        This webhook fires when a customer address is deleted via either the
        Control Panel, API or a storefront.
      consumes:
        - application/json
  /store/shipment/created:
    post:
      responses:
        '200':
          $ref: '#/responses/shipment_Resp'
          examples:
            store/shipment/created: |-
              {
                  "created_at": 1588186633,
                  "store_id": "your-store-id",
                  "producer": "stores/store_hash",
                  "scope": "store/shipment/created",
                  "hash": "3f83e5a23d36021c4ce56d6ec0bc1342e7911a02",
                  "data": {
                      "type": "shipment",
                      "id": 3,
                      "orderId": 121
                  }
              }
      summary: /store/shipment/created
      description: >
        This webhook fires when a shipment is created via either the Control
        Panel or the Orders API.
      tags:
        - Shipment
      consumes:
        - application/json
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588186633
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/shipment/created
              hash: 3f83e5a23d36021c4ce56d6ec0bc1342e7911a02
              data:
                type: shipment
                id: 3
                orderId: 121
  /store/shipment/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/shipment_Resp'
          examples:
            store/shipment/updated: |-
              {
                  "created_at": 1588187671,
                  "store_id": "your-store-id",
                  "producer": "stores/store_hash",
                  "scope": "store/shipment/updated",
                  "hash": "d17122edf13c9ab42dbad6d27b20bcc2359969a1",
                  "data": {
                      "type": "shipment",
                      "id": 3,
                      "orderId": 121
                  }
              }
      summary: /store/shipment/updated
      tags:
        - Shipment
      consumes:
        - application/json
      description: >+
        This webhook fires when a shipment is updated via either the Control
        Panel or the Orders API.

      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588187671
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/shipment/updated
              hash: d17122edf13c9ab42dbad6d27b20bcc2359969a1
              data:
                type: shipment
                id: 3
                orderId: 121
  /store/shipment/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/shipment_Resp'
          examples:
            store/shipment/deleted: |-
              {
                  "created_at": 1588187853,
                  "store_id": "your-store-id",
                  "producer": "stores/store_hash",
                  "scope": "store/shipment/deleted",
                  "hash": "8f44a0a832b4a1a50c717e26a76cf55633fd90db",
                  "data": {
                      "type": "shipment",
                      "id": "3",
                      "orderId": 121
                  }
              }
      summary: /store/shipment/deleted
      description: >
        This webhook fires when a shipment is deleted via either the Control
        Panel or the Orders API.
      tags:
        - Shipment
      consumes:
        - application/json
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588187853
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/shipment/deleted
              hash: 8f44a0a832b4a1a50c717e26a76cf55633fd90db
              data:
                type: shipment
                id: '3'
                orderId: 121
  /store/subscriber/created:
    post:
      responses:
        '200':
          $ref: '#/responses/subscriber_Resp'
      summary: /store/subscriber/created
      consumes:
        - application/json
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588350739
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/subscriber/created
              hash: 20c29c5a40f23b1ca7111e683f3062ceab48f732
              data:
                type: subscriber
                id: '2'
      tags:
        - Subscriber
      description: >-
        This webhook is fired when a newsletter subscriber is created either via
        a storefront shopper or via an API consumer. 
  /store/subscriber/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/subscriber_Resp'
      summary: /store/subscriber/updated
      tags:
        - Subscriber
      consumes:
        - application/json
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588352004
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/subscriber/updated
              hash: cb693beb1655af64b9ab88ff6339f2f6f90f28cb
              data:
                type: subscriber
                id: '2'
      description: This webhook is fired when a store newsletter subscriber is updated.
  /store/subscriber/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/subscriber_Resp'
      summary: /store/subscriber/deleted
      consumes:
        - application/json
      tags:
        - Subscriber
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              created_at: 1588352705
              store_id: your-store-id
              producer: 'stores/{$$.env.store_hash}'
              scope: store/subscriber/deleted
              hash: f696143917af309148b31978001c90317331a394
              data:
                type: subscriber
                id: '2'
      description: This webhook is fired when a store newsletter subscriber is deleted.
  "store/product/inventory/updated\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/product-inventory'
          examples:
            application/json:
              created_at: 1592433014
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/product/inventory/updated
              hash: 23393fd369844fd408d512d318f1a6437baef6d6
              data:
                type: product
                id: 5102
                inventory:
                  product_id: 5102
                  method: absolute
                  value: 1
      summary: "store/product/inventory/updated\t"
      tags:
        - Product
      consumes:
        - application/json
  "store/product/inventory/order/updated\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/product-inventory'
          examples:
            application/json:
              created_at: 1592433199
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/product/inventory/order/updated
              hash: 30b7ed5d60e9363a27fb0138053edd8052d68fe5
              data:
                type: product
                id: 5102
                inventory:
                  product_id: 5102
                  method: relative
                  value: -1
      summary: "store/product/inventory/order/updated\t"
      consumes:
        - application/json
      tags:
        - Product
  /store/order/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-updated'
          examples:
            application/json:
              created_at: 1592517272
              store_id: '999379820'
              producer: stores/vm2iajhsih
              scope: store/order/updated
              hash: dbf6f909d297059b12a6d11b56619449b4f24e3d
              data:
                type: order
                id: 349
      summary: /store/order/updated
      tags:
        - Order
      consumes:
        - application/json
  /store/order/refund/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/refund_created'
          examples:
            application/json:
              scope: store/order/refund/created
              store_id: '1025646'
              data:
                type: order
                id: 250
                refund:
                  refund_id: 3
              hash: cb07cdbdda8b1965e812693d5988154807eeed02
              created_at: 1561479923
              producer: 'stores/{store_hash}'
      tags:
        - Order
      summary: /store/order/refund/created
      description: Fires when an order is refunded.
      consumes:
        - application/json
basePath: ''
schemes:
  - https
consumes: []
produces: []
tags:
  - name: Subscriber
  - name: Product
  - name: SKU
  - name: Order
  - name: Customer
  - name: Cart
  - name: Cart LineItem
  - name: Category
  - name: Shipment
securityDefinitions: {}
parameters:
  Accept:
    in: header
    type: string
    name: Accept
    default: application/json
  Content-Type:
    name: Content-Type
    in: header
    type: string
    default: application/json
definitions:
  cart_Created:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
    title: cart_Created
  cartLineItem_Created:
    type: object
    title: cartLineItem_Created
    properties:
      type:
        type: string
      id:
        type: string
      cartId:
        type: string
  callback_Base:
    type: object
    title: callback_Base
    properties:
      store_id:
        type: string
      hash:
        type: string
      created_at:
        type: integer
      producer:
        type: string
      scope:
        type: string
  order-created:
    type: object
    title: Order Created
    properties:
      type:
        type: string
      id:
        type: integer
  order-updated:
    type: object
    title: Order Updated
    properties:
      type:
        type: string
      id:
        type: integer
      status:
        type: object
        properties:
          previous_status_id:
            type: integer
          new_status_id:
            type: integer
  order-message-created:
    type: object
    title: Order Message Created
    properties:
      type:
        type: string
      id:
        type: integer
      message:
        type: object
        properties:
          order_message_id:
            type: integer
  sku_Updated:
    type: object
    title: sku_Updated
    properties:
      type:
        type: string
      id:
        type: integer
      sku:
        type: object
        properties:
          product_id:
            type: integer
          variant_id:
            type: integer
  cart_couponApplied:
    type: object
    title: cart_couponApplied
    properties:
      type:
        type: string
      id:
        type: string
      couponId:
        type: integer
  storeInfo_Updated:
    title: storeInfo_Updated
    allOf:
      - $ref: '#/definitions/callback_Base'
      - type: object
        properties:
          data:
            type: object
            properties:
              type:
                type: string
  customer-created:
    type: object
    title: Customer Created
    properties:
      type:
        type: string
      id:
        type: integer
  customer-address-created:
    type: object
    title: Customer Address Created
    properties:
      type:
        type: string
      id:
        type: integer
      address:
        type: object
        properties:
          customer_id:
            type: integer
  shipment_Created:
    type: object
    title: shipment_Created
    properties:
      type:
        type: string
      id:
        type: integer
      orderId:
        type: integer
  categoryBase:
    type: object
    title: Category Base
    properties:
      type:
        type: string
      id:
        type: integer
  subscriber_Created:
    type: object
    title: subscriber_Created
    properties:
      type:
        type: string
      id:
        type: string
  product-base:
    type: object
    title: Product Base
    properties:
      type:
        type: string
      id:
        type: number
  product-inventory:
    type: object
    properties:
      type:
        type: string
      id:
        type: integer
      inventory:
        type: object
        properties:
          product_id:
            type: integer
          method:
            type: string
          value:
            type: integer
    title: Product Inventory
  refund_created:
    type: object
    properties:
      type:
        type: string
      id:
        type: integer
      refund:
        type: object
        properties:
          refund_id:
            type: integer
responses:
  Webhooks Response:
    description: ''
    schema:
      type: object
      properties:
        id:
          type: integer
          description: Id of the webhook
          example: 18048287
        client_id:
          type: string
          description: 'Client ID, unique to the store'
          example: m9r6keqmo7h7f23btnpwernbez1kglkl
        store_hash:
          type: string
          description: 'Store permanent ID. '
          example: sftg45fsd
        scope:
          type: string
          description: Webhook event subscribed to
          example: store/order/*
        destination:
          type: string
          example: 'https://665b65a6.ngrok.io/webhooks'
          description: URL that returns a 200 response for webhooks
        headers:
          type: object
          description: >-
            You can pass in any number of custom headers to validate webhooks
            being returned.
          properties:
            custom:
              type: string
        is_active:
          type: boolean
          example: false
          description: If the webhook is active or not
        created_at:
          type: integer
          example: 1561488106
          description: Created time
        updated_at:
          type: integer
          example: 1561488106
          description: Updated time
    examples:
      application/json:
        id: 18048287
        client_id: m9r6keqmo7h7f23btnp3anbez1kglkl
        store_hash: '{store_hash}'
        scope: store/order/*
        destination: 'https://665b65a6.ngrok.io/webhooks'
        headers:
          username: Webhooks User
          password: Webhooks Password
        is_active: true
        created_at: 1561488106
        updated_at: 1561488106
  cart_Resp:
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/cart_Created'
    examples:
      store/cart/created:
        created_at: 1588009674
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/created
        hash: e415a7a0e4d484b805b1d540d0aba719f62f5a01
        data:
          type: cart
          id: add4e20d-5aa3-4304-83d2-246854de4a4d
      store/cart/updated:
        created_at: 1588010740
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/updated
        hash: a452b98cc16dbb23d14be51f177b23613d301379
        data:
          type: cart
          id: add4e20d-5aa3-4304-83d2-246854de4a4d
      store/cart/deleted:
        created_at: 1588011031
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/deleted
        hash: 7df72a7cd87248b0ff737855667b8d8a2f25e562
        data:
          type: cart
          id: add4e20d-5aa3-4304-83d2-246854de4a4d
  CallbackResponse:
    description: >-
      To acknowledge that you received the webhook without issue, your server
      should return a 200 HTTP status code. Any other information you return in
      the request headers or request body will be ignored. Any response code
      outside the 200 range, including 3_xx_ codes, will indicate to us that you
      did not receive the webhook. When a webhook is not received (for whatever
      reason), we will retry the callback as described below.


      Need to set up a quick destination URL for testing? See [Tools for testing
      webhooks](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/about-webhooks#about-webhooks_tools-for-debugging-and-testing-webhooks).
    schema:
      type: object
      properties: {}
  sku_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/sku_Updated'
    examples:
      store/sku/created:
        created_at: 1588005657
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/sku/created
        hash: c0e5243f541df33ac8d718a6892aab8b88ad5205
        data:
          type: sku
          id: 142
          sku:
            product_id: 77
            variant_id: 101
      store/sku/updated:
        created_at: 1587763133
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/sku/updated
        hash: 30548ed9eafbacc0f39ee7d44e39d20fd5cc46c1
        data:
          type: sku
          id: 70
          sku:
            product_id: 77
            variant_id: 1
      store/sku/deleted: |-
        {
          "created_at": 1588007413,
          "store_id": "your-store-id",
          "producer": "stores/store_hash",
          "scope": "store/sku/deleted",
          "hash": "bac74aba643b575c6a7829d2e182d48cc5b0d844",
          "data": {
            "type": "sku",
            "id": 142,
            "sku": {
              "product_id": 77,
              "variant_id": 101
            }
          }
        }
  cartLineItem_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/cartLineItem_Created'
    examples:
      cart/lineItem/created:
        created_at: 1588012546
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/lineItem/created
        hash: 000e9e5ba3cbe55f700cf2a63050f78ee19a1e5b
        data:
          type: cart_line_item
          id: 32b222dc-bfe7-4327-9f75-f3f03cf267e2
          cartId: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
      cart/lineItem/updated:
        created_at: 1588013239
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/lineItem/updated
        hash: a1473ffdd63cf6ee81e10d24f117a7cade430022
        data:
          type: cart_line_item
          id: 32b222dc-bfe7-4327-9f75-f3f03cf267e2
          cartId: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
      cart/lineItem/deleted: |-
        {
          "created_at": 1588013526,
          "store_id": "your-store-id",
          "producer": "stores/store_hash",
          "scope": "store/cart/lineItem/deleted",
          "hash": "2637747217be23b10bf960dd961c5813627425e9",
          "data": {
            "type": "cart_line_item",
            "id": "32b222dc-bfe7-4327-9f75-f3f03cf267e2",
            "cartId": "8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa"
          }
        }
  cartCouponApplied_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/cart_couponApplied'
    examples:
      application/json:
        created_at: 1588014754
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/couponApplied
        hash: f6ff9869a37c9153c66839d652b72616ad9a3d23
        data:
          type: cart
          id: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
          couponId: 1
  cartAbandoned_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/definitions/cart_Created'
                - type: object
                  properties:
                    token:
                      type: string
    examples:
      application/json:
        created_at: 1588021465
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/abandoned
        hash: 7aceb38b2b3efae1d91b6a89fe7fdcc908b2d86e
        data:
          type: cart
          id: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
          token: d608433b40f024ef56cb808b71e566bc
  cartConverted_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/definitions/cart_Created'
                - type: object
                  properties:
                    orderId:
                      type: integer
    examples:
      application/json:
        created_at: 1588021880
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/cart/converted
        hash: adb6279b0ff032c690b764f345a4036181c6d985
        data:
          type: cart
          id: f87f2856-73ae-45dd-b817-faea7c384f75
          orderId: 121
  storeInfo_Resp:
    description: ''
    schema:
      $ref: '#/definitions/storeInfo_Updated'
    examples:
      application/json:
        created_at: 1588024057
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/information/updated
        hash: 77535b43f4dc24132b7867142d1b4dabac65c3e6
        data:
          type: store
  shipment_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/shipment_Created'
    examples:
      store/shipment/created: |-
        {
            "created_at": 1588186633,
            "store_id": "your-store-id",
            "producer": "stores/store_hash",
            "scope": "store/shipment/created",
            "hash": "3f83e5a23d36021c4ce56d6ec0bc1342e7911a02",
            "data": {
                "type": "shipment",
                "id": 3,
                "orderId": 121
            }
        }
      store/shipment/updated: |-
        {
            "created_at": 1588187671,
            "store_id": "your-store-id",
            "producer": "stores/store_hash",
            "scope": "store/shipment/updated",
            "hash": "d17122edf13c9ab42dbad6d27b20bcc2359969a1",
            "data": {
                "type": "shipment",
                "id": 3,
                "orderId": 121
            }
        }
      store/shipment/deleted: |-
        {
            "created_at": 1588187853,
            "store_id": "your-store-id",
            "producer": "stores/store_hash",
            "scope": "store/shipment/deleted",
            "hash": "8f44a0a832b4a1a50c717e26a76cf55633fd90db",
            "data": {
                "type": "shipment",
                "id": "3",
                "orderId": 121
            }
        }
  subscriber_Resp:
    description: ''
    schema:
      allOf:
        - $ref: '#/definitions/callback_Base'
        - type: object
          properties:
            data:
              $ref: '#/definitions/subscriber_Created'
    examples:
      store/subscriber/created:
        created_at: 1588350739
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/subscriber/created
        hash: 20c29c5a40f23b1ca7111e683f3062ceab48f732
        data:
          type: subscriber
          id: '2'
      store/subscriber/updated:
        created_at: 1588352004
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/subscriber/updated
        hash: cb693beb1655af64b9ab88ff6339f2f6f90f28cb
        data:
          type: subscriber
          id: '2'
      store/subscriber/deleted:
        created_at: 1588352705
        store_id: your-store-id
        producer: stores/store_hash
        scope: store/subscriber/deleted
        hash: f696143917af309148b31978001c90317331a394
        data:
          type: subscriber
          id: '2'
host: '{$$.env.webhook_destination}?'
