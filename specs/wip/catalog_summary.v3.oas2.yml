swagger: '2.0'
info:
  title: Summary
  version: '3.0'
  description: >-
    The Summary resource represents a lightweight summary of your BigCommerce
    Catalog. You can retrieve it to see information associated with your
    inventory such as inventory and variant count, inventory value, primary
    category id, etc.


    **On This Page**

    - [Authentication](#authentication)

    - [OAuth Scopes](#oauth-scopes)

    - [Additional Resources](#resources)

    ---


    ## Authentication

    You can authenticate requests by sending a `client_id` and `access_token`
    via `X-Auth-Client` and `X-Auth-Token` HTTP headers:


    ```http

    GET /stores/{$$.env.store_hash}/v3/catalog/summary

    host: api.bigcommerce.com

    Accept: application/json

    X-Auth-Client: {client_id}

    X-Auth-Token: {access_token}

    ```

    You can obtain the `client_id` and `access_token` using either of the
    following methods:

    - [Creating API
    account](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#obtaining-store-api-credentials)

    - [Installing an app in the BigCommerce control
    panel](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#obtaining-app-api-credentials)

    ---


    ## OAuth Scopes

    Scope limits ability to read or modify data. To interact with the Summary
    resource, set the scope to the minimum level needed to accomplish your
    specific task. 


    | UI Name  | Permission | Parameter                     |

    |----------|------------|-------------------------------|

    | Products | modify     | `store_v2_products`           |

    | Products | read-only  | `store_v2_products_read_only` |


    For more information on OAuth Scopes, see the [REST API
    Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes)
    page.


    ---


    ## Additional Information

    **Webhooks**

    -
    [Products](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#products)


    **Related API Resources**

    -
    [Products](https://developer.bigcommerce.com/api-reference/store-management/catalog/products)

    -
    [Variants](https://developer.bigcommerce.com/api-reference/store-management/catalog/variants)
  termsOfService: 'https://www.bigcommerce.com/terms/'
  license:
    name: ''
  contact:
    name: BigCommerce Developer Documentation
    url: 'https://developer.bigcommerce.com/'
host: api.bigcommerce.com
basePath: '/stores/{$$.env.store_hash}/v3'
tags:
  - name: Summary
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
paths:
  /catalog/summary:
    get:
      tags:
        - Summary
      description: |-
        Returns a lightweight inventory summary from the BigCommerce Catalog.

        The inventory summary includes:
        * inventory_count
        * variant_count
        * inventory_value
        * highest_variant_price
        * average_variant_price
        * lowest_variant_price
        * oldest_variant_date
        * newest_variant_date
        * primary_category_id
        * primary_category_name
      responses:
        '200':
          $ref: '#/responses/CatalogSummaryResponse'
      summary: Get a Catalog Summary
      parameters:
        - in: header
          type: string
          name: Accept
          default: application/json
          required: true
        - name: Content-Type
          in: header
          type: string
          default: application/json
          required: true
        - in: body
          name: body
          schema: {}
      operationId: getCatalogSummary
parameters:
  FilterTemplateFileParam:
    in: query
    name: template_file
    description: 'The template file, for example: `pages/home`.'
    type: string
    required: false
  FilterIdParam:
    name: id
    description: |
      Filter items by id.
    required: false
    in: query
    type: integer
  FilterSkuParam:
    name: sku
    description: |
      Filter items by sku.
    required: false
    in: query
    type: string
  FilterNameParam:
    name: name
    description: |
      Filter items by name.
    required: false
    in: query
    type: string
  FilterEmailParam:
    name: email
    description: |
      Filter items by email.
    required: false
    in: query
    type: string
  FilterSourceParam:
    name: source
    description: |
      Filter items by source.
    required: false
    in: query
    type: string
  FilterOrderIdParam:
    name: order_id
    description: |
      Filter items by order_id.
    required: false
    in: query
    type: integer
  FilterUpcParam:
    name: upc
    description: |
      Filter items by upc.
    required: false
    in: query
    type: string
  FilterPriceParam:
    name: price
    description: |
      Filter items by price.
    required: false
    in: query
    type: number
  FilterSalePriceParam:
    name: sale_price
    description: |
      Filter items by sale_price.
    required: false
    in: query
    type: number
  FilterRetailPriceParam:
    name: retail_price
    description: |
      Filter items by retail_price.
    required: false
    in: query
    type: number
  FilterMapPriceParam:
    name: map_price
    description: |
      Filter items by map_price.
    required: false
    in: query
    type: number
  FilterCalculatedPriceParam:
    name: calculated_price
    description: |
      Filter items by calculated_price.
    required: false
    in: query
    type: number
  FilterWeightParam:
    name: weight
    description: |
      Filter items by weight.
    required: false
    in: query
    type: number
  FilterConditionParam:
    name: condition
    description: |
      Filter items by condition.
    required: false
    in: query
    type: string
    enum:
      - new
      - used
      - refurbished
  FilterBrandIdParam:
    name: brand_id
    description: |
      Filter items by brand_id.
    required: false
    in: query
    type: integer
  FilterDateModifiedParam:
    name: date_modified
    description: >-
      Filter items by date_modified. For example
      `v3/catalog/products?date_modified:min=2018-06-15`
    required: false
    in: query
    type: string
    format: date-time
  FilterDateCreatedParam:
    name: date_created
    description: |
      Filter items by date_created.
    required: false
    in: query
    type: string
    format: date-time
  FilterDateLastImportedParam:
    name: date_last_imported
    description: >-
      Filter items by date_last_imported. For example
      `v3/catalog/products?date_last_imported:min=2018-06-15`
    required: false
    in: query
    type: string
    format: date-time
  FilterIsVisibleParam:
    name: is_visible
    description: 'Filter items by if visible on the storefront. '
    required: false
    in: query
    type: boolean
  FilterIsFeaturedParam:
    name: is_featured
    description: |
      Filter items by is_featured.
    required: false
    in: query
    type: integer
  FilterIsFreeShippingParam:
    name: is_free_shipping
    description: |
      Filter items by is_free_shipping.
    required: false
    in: query
    type: integer
  FilterInventoryLevelParam:
    name: inventory_level
    description: |
      Filter items by inventory_level.
    required: false
    in: query
    type: integer
  FilterInventoryLowParam:
    name: inventory_low
    description: |
      Filter items by inventory_low. Values: 1, 0.
    required: false
    in: query
    type: integer
  FilterOutOfStockParam:
    name: out_of_stock
    description: >
      Filter items by out_of_stock. To enable the filter, pass
      `out_of_stock`=`1`.
    required: false
    in: query
    type: integer
  FilterTotalSoldParam:
    name: total_sold
    description: |
      Filter items by total_sold.
    required: false
    in: query
    type: integer
  ProductFilterTypeParam:
    name: type
    description: 'Filter items by type: `physical` or `digital`.'
    required: false
    in: query
    type: string
    enum:
      - digital
      - physical
  FilterCategoriesParam:
    name: categories
    description: |-
      Filter items by categories.
       If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
    required: false
    in: query
    type: integer
  FilterKeywordParam:
    name: keyword
    description: 'Filter items by keywords. eg. new, towel, bath'
    required: false
    in: query
    type: string
  ProductFilterKeywordParam:
    name: keyword
    description: >
      Filter items by keywords found in the `name`, `description`, or `sku`
      fields, or in the brand name.
    required: false
    in: query
    type: string
  ProductFilterKeywordContextParam:
    name: keyword_context
    description: Set context for a product search.
    required: false
    in: query
    type: string
    enum:
      - shopper
      - merchant
  FilterStatusParam:
    name: status
    description: |
      Filter items by status.
    required: false
    in: query
    type: integer
  FilterIncludeParam:
    name: include
    description: >-
      Sub-resources to include on a product, in a comma-separated list. If
      `options` or `modifiers` is used, results are limited to 10 per page.
    required: false
    in: query
    type: string
    enum:
      - variants
      - images
      - custom_fields
      - bulk_pricing_rules
      - primary_image
      - modifiers
      - options
      - videos
  FilterIncludeFieldsParam:
    name: include_fields
    description: >-
      Fields to include, in a comma-separated list. The ID and the specified
      fields will be returned.
    required: false
    in: query
    type: string
  FilterExcludeFieldsParam:
    name: exclude_fields
    description: >-
      Fields to exclude, in a comma-separated list. The specified fields will be
      excluded from a response. The ID cannot be excluded.
    required: false
    in: query
    type: string
  FilterParentIdParam:
    name: parent_id
    description: >-
      Filter items by parent_id. If the category is a child or sub category it
      can be filtered with the parent_id. 
    required: false
    in: query
    type: integer
  FilterPageTitleParam:
    name: page_title
    description: |
      Filter items by page_title.
    required: false
    in: query
    type: string
  FilterAvailabilityParam:
    name: availability
    description: |
      Filter items by availability. Values are: available, disabled, preorder.
    required: false
    in: query
    type: string
    enum:
      - available
      - disabled
      - preorder
  FilterPriceListIdParam:
    name: price_list_id
    description: >-
      This filter returns the product pricing with the *Price List* pricing
      instead. To use: 

      `?price_list_id=1`.

      If there are variants use:

      `?price_list_id=1&include=variants`
    required: false
    in: query
    type: integer
  FilterProductIdParam:
    type: string
    name: product_id
    in: query
    required: false
    description: |
      A comma-separated list of ids of `Product`s whose prices were requested.
  FilterVariantIdParam:
    type: integer
    name: variant_id
    in: query
    required: false
    description: |
      The ID of the `Variant` whose prices were requested.
  FilterCurrencyParam:
    name: currency
    description: |
      Filter items by currency.
    required: false
    in: query
    type: string
    format: ISO-4217
  PageParam:
    name: page
    description: Specifies the page number in a limited (paginated) list of products.
    required: false
    in: query
    type: integer
  LimitParam:
    name: limit
    description: >-
      Controls the number of items per page in a limited (paginated) list of
      products.
    required: false
    in: query
    type: integer
  DirectionParam:
    name: direction
    description: |
      Sort direction. Acceptable values are: `asc`, `desc`.
    required: false
    in: query
    type: string
    enum:
      - asc
      - desc
  ProductSortParam:
    name: sort
    description: |
      Field name to sort by.
    required: false
    in: query
    type: string
    enum:
      - id
      - name
      - sku
      - price
      - date_modified
      - date_last_imported
      - inventory_level
      - is_visible
      - total_sold
  ProductIdParam:
    name: product_id
    in: path
    description: |
      The ID of the `Product` to which the resource belongs.
    required: true
    type: integer
  ReviewIdParam:
    name: review_id
    description: |
      The ID of the `review` that is being operated on.
    required: true
    in: path
    type: integer
  ImageIdParam:
    name: image_id
    description: |
      The ID of the `Image` that is being operated on.
    required: true
    in: path
    type: integer
  VideoIdParam:
    name: id
    description: The BigCommerce ID of the `Video`
    required: true
    in: path
    type: integer
  ComplexRuleIdParam:
    name: complex_rule_id
    description: |
      The ID of the `ComplexRule`.
    required: true
    in: path
    type: integer
  ConfigurableFieldIdParam:
    name: configurable_field_id
    description: |
      The ID of the `ConfigurableField`.
    required: true
    in: path
    type: integer
  CustomFieldIdParam:
    name: custom_field_id
    description: |
      The ID of the `CustomField`.
    required: true
    in: path
    type: integer
  BulkPricingRuleIdParam:
    name: bulk_pricing_rule_id
    description: |
      The ID of the `BulkPricingRule`.
    required: true
    in: path
    type: integer
  ModifierIdParam:
    name: modifier_id
    description: |
      The ID of the `Modifier`.
    required: true
    in: path
    type: integer
  ValueIdParam:
    name: value_id
    description: |
      The ID of the `Modifier/Option Value`.
    required: true
    in: path
    type: integer
  OptionIdParam:
    name: option_id
    description: |
      The ID of the `Option`.
    required: true
    in: path
    type: integer
  VariantIdParam:
    name: variant_id
    in: path
    description: |
      ID of the variant on a product, or on an associated Price List Record.
    required: true
    type: integer
  CategoryIdParam:
    name: category_id
    in: path
    description: |
      The ID of the `Category` to which the resource belongs.
    required: true
    type: integer
  BrandIdParam:
    name: brand_id
    in: path
    description: |
      The ID of the `Brand` to which the resource belongs.
    required: true
    type: integer
  MetafieldIdParam:
    name: metafield_id
    in: path
    description: |
      The ID of the `Metafield`.
    required: true
    type: integer
  MetafieldKeyParam:
    name: key
    in: query
    description: |
      Filter based on a metafield's key.
    required: false
    type: string
  MetafieldNamespaceParam:
    name: namespace
    in: query
    description: Filter based on a metafield's namespace.
    required: false
    type: string
  ImageFileParam:
    name: image_file
    description: |
      An image file. Supported MIME types include GIF, JPEG, and PNG.
    required: true
    in: formData
    type: file
  OrderIdParam:
    name: order_id
    in: path
    description: |
      The ID of the `Order` to which the transactions belong.
    required: true
    type: integer
  Accept:
    in: header
    type: string
    name: Accept
    default: application/json
    required: true
  Content-Type:
    name: Content-Type
    in: header
    type: string
    default: application/json
    required: true
  product_id:
    name: product_id
    in: query
    type: string
    description: >-
      A comma-separated list of ids of Products whose prices were requested. For
      example:

      `?product_id=:id`

      `?product_id:in=77,80,81`
definitions:
  catalogSummary_Full:
    type: object
    description: Catalog Summary object describes a lightweight summary of the catalog.
    title: catalogSummary_Full
    properties:
      inventory_count:
        type: integer
        description: |
          A count of all inventory items in the catalog.
        example: 2000
      inventory_value:
        type: number
        format: double
        description: |
          Total value of store's inventory.
        example: 267000
      primary_category_id:
        type: integer
        description: |
          ID of the category containing the most products.
        example: 23
      primary_category_name:
        type: string
        description: |
          Name of the category containing the most products.
        example: Shop All
      variant_count:
        type: integer
        description: Total number of variants
        example: 46
      highest_variant_price:
        type: number
        format: double
        description: Highest priced variant
        example: 249
      average_variant_price:
        type: number
        format: double
        example: 83.07978261
        description: Average price of all variants
      lowest_variant_price:
        type: string
        example: '7'
        description: Lowest priced variant in the store
      oldest_variant_date:
        type: string
        example: '2018-08-15'
      newest_variant_date:
        type: string
        example: '2018-08-16'
  metaCollection_Full:
    type: object
    description: 'Data about the response, including pagination and collection totals.'
    title: metaCollection_Full
    properties:
      pagination:
        $ref: '#/definitions/pagination_Full'
  pagination_Full:
    type: object
    description: 'Data about the response, including pagination and collection totals.'
    title: pagination_Full
    properties:
      total:
        type: integer
        description: |
          Total number of items in the result set.
        example: 36
      count:
        type: integer
        description: |
          Total number of items in the collection response.
        example: 36
      per_page:
        type: integer
        description: >
          The amount of items returned in the collection per page, controlled by
          the limit parameter.
        example: 50
      current_page:
        type: integer
        description: |
          The page you are currently on within the collection.
        example: 1
      total_pages:
        type: integer
        description: |
          The total number of pages in the collection.
        example: 1
      links:
        type: object
        description: >
          Pagination links for the previous and next parts of the whole
          collection.
        properties:
          previous:
            type: string
            description: |
              Link to the previous page returned in the response.
          current:
            type: string
            description: |
              Link to the current page returned in the response.
            example: '?page=1&limit=50'
          next:
            type: string
            description: |
              Link to the next page returned in the response.
  metaEmpty_Full:
    type: object
    description: Empty meta object; may be used later.
    title: metaEmpty_Full
  errorResponse_Full:
    allOf:
      - $ref: '#/definitions/error_Base'
      - type: object
        properties:
          errors:
            $ref: '#/definitions/detailedErrors'
    title: errorResponse_Full
  error_Base:
    type: object
    description: |
      Error payload for the BigCommerce API.
    properties:
      status:
        description: |
          The HTTP status code.
        type: integer
      title:
        description: |
          The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
    title: error_Base
  errorNotFound:
    description: Error payload for the BigCommerce API.
    type: object
    properties:
      status:
        description: |
          404 HTTP status code.
        type: integer
      title:
        description: The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
    title: errorNotFound
  errorNoContent:
    description: No-content response for the BigCommerce API.
    type: object
    properties:
      status:
        description: |
          204 HTTP status code.
        type: integer
      title:
        description: The error title describing the situation.
        type: string
      type:
        type: string
      instance:
        type: string
    title: errorNoContent
  detailedErrors:
    type: object
    title: detailedErrors
    properties:
      additionalProperties:
        type: string
securityDefinitions:
  X-Auth-Client:
    type: apiKey
    name: X-Auth-Client
    in: header
    description: >-
      ### OAuth Scopes

      |  **UI Name** | **Permission** | **Parameter** |

      | --- | --- | --- |

      |  Products | modify | `store_v2_products` |

      |  Products | read-only | `store_v2_products_read_only` |


      ### Headers


      |Header|Parameter|Description|

      |-|-|-|

      |`X-Auth-Client`|`client_id`|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|

      |`X-Auth-Token`|`access_token `|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|


      ### Example


      ```http

      GET /stores/{$$.env.store_hash}/v3/catalog/summary

      host: api.bigcommerce.com

      Content-Type: application/json

      X-Auth-Client: {client_id}

      X-Auth-Token: {access_token}

      ```


      * For more information on Authenticating BigCommerce APIs, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
  X-Auth-Token:
    type: apiKey
    name: X-Auth-Token
    in: header
    description: >-
      ### OAuth Scopes

      |  **UI Name** | **Permission** | **Parameter** |

      | --- | --- | --- |

      |  Products | modify | `store_v2_products` |

      |  Products | read-only | `store_v2_products_read_only` |


      ### Headers


      |Header|Parameter|Description|

      |-|-|-|

      |`X-Auth-Client`|`client_id`|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|

      |`X-Auth-Token`|`access_token `|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|


      ### Example


      ```http

      GET /stores/{$$.env.store_hash}/v3/catalog/summary

      host: api.bigcommerce.com

      Content-Type: application/json

      X-Auth-Client: {client_id}

      X-Auth-Token: {access_token}

      ```


      * For more information on Authenticating BigCommerce APIs, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
security:
  - X-Auth-Client: []
  - X-Auth-Token: []
responses:
  CatalogSummaryResponse:
    description: ''
    schema:
      type: object
      title: Catalog Summary Response
      properties:
        data:
          $ref: '#/definitions/catalogSummary_Full'
        meta:
          $ref: '#/definitions/metaEmpty_Full'
    examples:
      application/json:
        data:
          inventory_count: 4995
          variant_count: 54
          inventory_value: 702350.03
          highest_variant_price: 555
          average_variant_price: 74.40055556
          lowest_variant_price: 7
          oldest_variant_date: '2018-08-15'
          newest_variant_date: '2018-09-07'
          primary_category_id: 23
          primary_category_name: Shop All
        meta: {}
x-stoplight:
  docs:
    includeDownloadLink: true
    showModels: false
