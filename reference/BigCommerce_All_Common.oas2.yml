{
  "swagger": "2.0",
  "info": {
    "version": "3.0",
    "title": "BigCommerce {NAME} API",
    "description": "- [OAuth Scopes](#oauth-scopes)\n- [Authentication](#authentication)\n- [Available Endpoints](#available-endpoints)\n- [Usage Notes](#usage-notes)\n- [FAQ](#faq)\n- [Resources](#resources)\n\nIntroduction\n\n## OAuth Scopes\n| UI Name                                      | Permission | Parameter                                     |\n|----------------------------------------------|------------|-----------------------------------------------|\n| Carts                                        | modify     | `store_cart`                                  |\n| Carts                                        | read-only  | `store_cart_read_only`                        |\n| Channel Listings                             | modify     | `store_channel_listings`                      |\n| Channel Listings                             | read-only  | `store_channel_listings_read_only`            |\n| Channel Settings                             | modify     | `store_channel_settings`                      |\n| Channel Settings                             | read-only  | `store_channel_settings_read_only`            |\n| Checkout Content                             | modify     | `store_content_checkout`                      |\n| Checkout Content                             | read-only  | `store_content_checkout_read_only`            |\n| Checkouts                                    | modify     | `store_checkout`                              |\n| Checkouts                                    | read-only  | `store_checkout_read_only`                    |\n| Content                                      | modify     | `store_v2_content`                            |\n| Content                                      | read-only  | `store_v2_content_read_only`                  |\n| Create Payments                              | create     | `store_payments_access_token_create`          |\n| Customer Login                               | login      | `store_v2_customers_login`                    |\n| Customers                                    | modify     | `store_v2_customers_login`                    |\n| Customers                                    | read-only  | `store_v2_customers_login_read_only`          |\n| Get Payment Methods                          | read-only  | `store_payments_methods_read`                 |\n| Information & Settings                       | modify     | `store_v2_information`                        |\n| Information & Settings                       | read-only  | `store_v2_information_read_only`              |\n| Marketing                                    | modify     | `store_v2_marketing`                          |\n| Marketing                                    | read-only  | `store_v2_marketing_read_only`                |\n| Order Transactions                           | modify     | `store_v2_transactions`                       |\n| Order Transactions                           | read-only  | `store_v2_transactions_read_only`             |\n| Orders                                       | modify     | `store_v2_orders`                             |\n| Orders                                       | read-only  | `store_v2_orders_read_only`                   |\n| Products                                     | modify     | `store_v2_products`                           |\n| Products                                     | read-only  | `store_v2_products_read_only`                 |\n| Sites & Routes                               | modify     | `store_sites`                                 |\n| Sites & Routes                               | read-only  | `store_sites_read_only`                       |\n| Storefront API Customer Impersonation Tokens | manage     | `store_storefront_api_customer_impersonation` |\n| Storefront API Tokens                        | manage     | `store_storefront_api`                        |\n| Themes                                       | modify     | `store_themes_manage`                         |\n\nFor more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Authentication\n\nRequests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Available Endpoints\n| Resource / Endpoint                     | Description                                                             |\n|-----------------------------------------|-------------------------------------------------------------------------|\n| Banners                                 | Create and manage store banners                                         |\n| Blog Posts                              | Create and manage store blog posts                                      |\n| Blog Tags                               | Create and manage store blog tags                                       |\n| Brand Images                            | Create and manage brand images                                          |\n| Brand Metafields                        | Create and manage brand metafields                                      |\n| Brands                                  | Create and manage brands                                                |\n| Carts                                   | Create an manage store carts                                            |\n| Catalog                                 | Create and manage store categories, products, and brands                |\n| Categories                              | Create and manage categorties                                           |\n| Category Images                         | Create and manage category images                                       |\n| Category Metafields                     | Create and manage category metafields                                   |\n| Channels                                | Create and manage catalog listings and channels                         |\n| Checkouts                               | Create checkouts for a store                                            |\n| Coupons                                 | Create and manage store coupons                                         |\n| Currenies                               | Create and manage store currencies and their display                    |\n| Current Customer                        | Identify customer's on the front-end securely                           |\n| Customer Login                          | Use JWT & SSO to login a customer                                       |\n| Customers Attribute Values              | Create and manage customer attribute values                             |\n| Customers Attributes                    | Create and manage customer attributes                                   |\n| Customers Form Field Values             | Create an manage customer form field values                             |\n| Customers Groups                        | Create and manage customer groups                                       |\n| Customers v2                            | Create and manage  customers and their addresses                        |\n| Customers v3                            | Create and manage customers and their addresses                         |\n| Customers Validate Password             | Validate customer passwords                                             |\n| Geography                               | Get a list of states, provincies, and countries                         |\n| Gift Certificates                       | Manage gift certificates                                                |\n| Order Transactions                      | View order payment information                                          |\n| Orders                                  | Create and manage orders                                                |\n| Pages                                   | Create and manage store content pages                                   |\n| Payment Methods                         | Get a store's enabled payment methods                                   |\n| Payment Processing                      | Process payments on orders and checkouts                                |\n| Payment Processing Methods              | Get order payment methods for processing                                |\n| Payment Processing Token                | Get an access token for payment processing                              |\n| Price List Records                      | Create and manage price list records                                    |\n| Price Lists                             | Create and manage catalog pricing variations                            |\n| Product Bulk Pricing Rules              | Create and manage product bulk pricing rules                            |\n| Product Complex Rules                   | Create and manage product complex rules                                 |\n| Product Custom Fields                   | Create and manage product custom fields                                 |\n| Product Images                          | Create and manage product images                                        |\n| Product Metafields                      | Create and manage product meta fields                                   |\n| Product Modifier Images                 | Create and manage product modifer images                                |\n| Product Modifier Values                 | Create and manage product modifier values                               |\n| Product Modifiers                       | Create and manage product midifiers                                     |\n| Product Reviews                         | Create and manage product reviews                                       |\n| Product Variant Option Values           | Create and manage product variant option values                         |\n| Product Variant Options                 | Create and manage product variant options                               |\n| Product Variants                        | Create and manage product variants                                      |\n| Product Videos                          | Create and manage product videos                                        |\n| Products                                | Create and manage products                                              |\n| ProductVariant Metafields               | Create and manage product meta flields                                  |\n| Redirects                               | Manage a store's URL redirects                                          |\n| Scripts                                 | Add client-side code to a store                                         |\n| Shipping                                | Create and manage a store's shipping methods and zones.                 |\n| Shipping Carriers                       | Create and manage shipping carriers                                     |\n| Shipping Methods                        | Create and manage shipping methods                                      |\n| Shipping Poviders Connection Options    | Specification for creating an external shipping carrier service         |\n| Shipping Provider Rate Request          | Specification for creating an external shipping carrier service         |\n| Shipping Zones                          | Create and manage shipping zones                                        |\n| Sites                                   | Manage sites and routing for headless storefronts                       |\n| Store Infomation                        | Get store metadata                                                      |\n| Storefront API Token                    | Create Auth Tokens for use with Storefront APIs                         |\n| Storefront Carts                        | Create and get carts on the front-end                                   |\n| Storefront Checkouts                    | Create and get checkouts on the front-end                               |\n| Storefront Customer Impersonation Token | Create a storefront API token for customer impersonation                |\n| Storefront Orders                       | Get order data on the front-end after order is palced                   |\n| Subscribers                             | Create and manage store newsletter subscribers                          |\n| Tax Class                               | Get a store's available tax classes                                     |\n| Themes                                  | Create and manage store theme's                                         |\n| Time Zone                               | Get store system timestamp                                              |\n| Variants                                | Get and update all variants                                             |\n| Webhooks                                | Manage store Webhooks                                                   |\n| Widgets                                 | Create and manage store widgets                                         |\n| Widgets Placements                      | Place, move, and remove store widgets                                   |\n| Widgets Regions                         | Get list of regions widgets can be placed for a specified template file |\n| Widgets Templates                       | Create and manage widget templates                                      |\n| Wishlist                                | Create and manage customer wishlists                                    |\n\n## Usage Notes\n\n**Topic**\n* thing\n* thing\n* thing\n\n## FAQ\n\n**question** \n\nanswer\n\n**question**\n\nanswer\n\n## Resources ",
    "contact": {
      "url": "https://developer.bigcommerce.com",
      "name": "BigCommerce Developer Documentation"
    },
    "license": {
      "name": ""
    },
    "termsOfService": ""
  },
  "host": "api.bigcommerce.com",
  "paths": {
    "/orders/{id}/payment_actions/capture": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "Capture Payment for an Order",
        "operationId": "postPaymentActionsCapture",
        "tags": [
          "Payment Actions"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/orders/{id}/payment_actions/void": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "metaEmpty_Full": {
      "type": "object",
      "title": "metaEmpty_Full"
    },
    "pagination_Full": {
      "type": "object",
      "title": "pagination_Full",
      "properties": {
        "total": {
          "description": "Total number of items in the result set.",
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "description": "Total number of items in the collection response.",
          "type": "integer",
          "format": "int32"
        },
        "per_page": {
          "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
          "type": "integer",
          "format": "int32"
        },
        "current_page": {
          "description": "The page you are currently on within the collection.",
          "type": "integer",
          "format": "int32"
        },
        "total_pages": {
          "description": "The total number of pages in the collection.",
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "$ref": "#/definitions/links_Full"
        }
      }
    },
    "metaCollection_Full": {
      "type": "object",
      "title": "metaCollection_Full",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/pagination_Full"
        }
      }
    },
    "links_Full": {
      "type": "object",
      "properties": {
        "previous": {
          "type": "string",
          "description": "Link to the previous page returned in the response.\n"
        },
        "current": {
          "type": "string",
          "description": "Link to the current page returned in the response.\n",
          "example": "?page=1&limit=50"
        },
        "next": {
          "type": "string",
          "description": "Link to the next page returned in the response.\n"
        }
      },
      "title": "links_Full"
    },
    "error_Full": {
      "type": "object",
      "title": "error_Full",
      "properties": {
        "status": {
          "description": "The HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the particular error.\n",
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "errorDetailed_Full": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DetailedErrors"
        }
      },
      "title": "errorDetailed_Full"
    }
  },
  "schemes": [
    "https"
  ],
  "parameters": {
    "Accept": {
      "in": "header",
      "type": "string",
      "name": "Accept",
      "default": "application/json",
      "required": true,
      "description": "Accept"
    },
    "Content-Type": {
      "name": "Content-Type",
      "in": "header",
      "type": "string",
      "default": "application/json",
      "required": true,
      "description": "Content-Type"
    }
  },
  "securityDefinitions": {
    "X-Auth-Client": {
      "type": "apiKey",
      "name": "X-Auth-Client",
      "in": "header",
      "description": "### OAuth Scopes\n|  **UI Name** | **Permission** | **Parameter** |\n| --- | --- | --- |\n|  Carts | modify | `store_cart` |\n|  Carts | read-only | `store_cart_read_only` |\n\n### Headers\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n### Example\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nContent-Type: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\n* For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)."
    },
    "X-Auth-Token": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Auth-Token",
      "description": "### OAuth Scopes\n|  **UI Name** | **Permission** | **Parameter** |\n| --- | --- | --- |\n|  Carts | modify | `store_cart` |\n|  Carts | read-only | `store_cart_read_only` |\n\n### Headers\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n### Example\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nContent-Type: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\n* For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)."
    }
  },
  "security": [
    {
      "X-Auth-Client": []
    },
    {
      "X-Auth-Token": []
    },
    {
      "OAuthScopes": []
    }
  ],
  "consumes": [],
  "produces": [],
  "basePath": "/stores/{$$.env.store_hash}/v3",
  "tags": [
    {
      "name": "Example"
    },
    {
      "name": "Payment Actions"
    }
  ],
  "responses": {
    "502_GatewayError": {
      "description": "If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail.",
      "schema": {
        "$ref": "#/definitions/error_Full"
      },
      "examples": {
        "application/json": {
          "status": 502,
          "title": "A login URL could not be generated. Please try another request.",
          "type": "https://developer.bigcommerce.com/api#api-status-codes"
        }
      }
    },
    "504_GatewayTimeout": {
      "description": "If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)",
      "schema": {
        "$ref": "#/definitions/errorDetailed_Full"
      },
      "examples": {
        "application/json": {
          "status": 504,
          "title": "Gateway Timeout",
          "type": "https://developer.bigcommerce.com/api#api-status-codes",
          "errors": {}
        }
      }
    },
    "403_Unauthorized": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/error_Full"
      },
      "examples": {
        "application/json": {
          "status": 403,
          "title": "Unauthorized Access. You do not have permission to make this request.",
          "type": "https://developer.bigcommerce.com/api#api-status-codes"
        }
      }
    },
    "400_BadRequest": {
      "description": "Malformed request syntax. Typically need to fix the JSON\nBody to resend successfully.",
      "schema": {
        "$ref": "#/definitions/error_Full"
      },
      "examples": {
        "application/json": {
          "status": 400,
          "title": "Input is invalid.",
          "type": "https://developer.bigcommerce.com/api#api-status-codes"
        }
      }
    },
    "404_NotFound": {
      "description": "If the requested account resource is not found for the franchise, return a 404 Not Found.",
      "schema": {
        "$ref": "#/definitions/error_Full"
      },
      "examples": {
        "application/json": {
          "status": 404,
          "title": "Account with {id} not found",
          "type": "https://developer.bigcommerce.com/api#api-status-codes"
        }
      }
    },
    "422_UnprocessableEntity": {
      "description": "This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object.",
      "schema": {
        "$ref": "#/definitions/errorDetailed_Full"
      },
      "examples": {
        "application/json": {
          "status": 422,
          "title": "JSON data is missing or invalid",
          "type": "https://developer.bigcommerce.com/api#api-status-codes",
          "errors": {
            "name": "error.expected.jsstring",
            "primary_contact.district": "error.expected.jsstring."
          }
        }
      }
    },
    "503_ServiceUnavailable": {
      "description": "If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)",
      "schema": {
        "$ref": "#/definitions/error_Full"
      },
      "examples": {
        "application/json": {
          "status": 503,
          "title": "Service Unavailable",
          "type": "https://developer.bigcommerce.com/api#api-status-codes"
        }
      }
    },
    "paymentActionsCapture_Resp": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {}
      }
    },
    "paymentActionsVoid_Resp": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {}
      }
    }
  }
}